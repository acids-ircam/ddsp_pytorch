# 

In a previous blog post I wrote about [package search and retrieval](#) using pure cmake.  Using a common interface I abstract all kinds of package sources including: 
* `git_package_source`
* `hg_package_source`
* `path_package_source`
* `archive_package_source`
* `github_package_source`
* `bitbucket_package_source`
* `webarchive_package_source`
* `svn_package_source` 

Which allow you to use a common interface consisting of just 3 function `query`, `resolve` and `pull` to get a vast amount of packages.  

Now I want to show you how I use the metadata preovided by these `package source`s to handle dependency management.

## Automated Dependency Management

Dependency Management revolves around a `dependency graph` which consists of `package`s and `dependency`s which connect them.  When looking at an arbitrary software project every more or less closed unit of related files is considered a package, when you can resuse this group of related files in different places you can talk about that being a package.  My definition of a `package` is a bit more general.  What I understand as a package is an identifier, metadata and binary data.